{"version":3,"file":"static/js/392.d5ee42f9.chunk.js","mappings":"+SACMA,EAAU,mCAMT,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA4BC,GAA5B,yFAEGC,EAFH,+BAEqCH,EAFrC,iCAEqEE,EAFrE,wCAGoBE,EAAAA,EAAAA,IAAUD,GAH9B,cAGGE,EAHH,yBAIIA,EAASC,MAJb,sCAMHC,QAAQC,MAAM,uCAAd,MANG,qFAaA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA+BC,GAA/B,yFAEGP,EAFH,gBAEsBO,EAFtB,oBAEoCV,EAFpC,4BAGoBI,EAAAA,EAAAA,IAAUD,GAH9B,cAGGE,EAHH,yBAIIA,EAASC,MAJb,sCAMHC,QAAQC,MAAM,+CAAd,MANG,qFAaA,SAAeG,IAAtB,+B,aAAO,O,oBAAA,sGAEGR,EAFH,qCAE2CH,GAF3C,SAGoBI,EAAAA,EAAAA,IAAUD,GAH9B,cAGGE,EAHH,yBAIIA,EAASC,MAJb,sCAMHC,QAAQC,MAAM,6CAAd,MANG,qFAaA,SAAeI,EAAtB,kC,aAAO,O,oBAAA,WAA0BF,GAA1B,yFAEGP,EAFH,gBAEsBO,EAFtB,4BAE4CV,EAF5C,mCAGoBI,EAAAA,EAAAA,IAAUD,GAH9B,cAGGE,EAHH,yBAIIA,EAASC,MAJb,sCAMHC,QAAQC,MAAM,2CAAd,MANG,qFAaA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,yFAEGP,EAFH,gBAEsBO,EAFtB,4BAE4CV,EAF5C,4BAGoBI,EAAAA,EAAAA,IAAUD,GAH9B,cAGGE,EAHH,yBAIIA,EAASC,MAJb,sCAMHC,QAAQC,MAAM,2CAAd,MANG,qFAxDPJ,EAAAA,EAAAA,SAAAA,QAAyB,+B,sICFzB,GAAiB,E,SCsEjB,EAjEa,WACX,OAAwBU,EAAAA,EAAAA,UAAS,MAAjC,eAAOR,EAAP,KAAaS,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAEQC,GAAiBC,EAAAA,EAAAA,MAAjBD,aAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,sGAEZJ,GAAW,GAFC,UAGWJ,EAAAA,EAAAA,IAAgBK,GAH3B,gBAGJI,EAHI,EAGJA,KACRP,EAAQO,GACRL,GAAW,GALC,kDAOZV,QAAQgB,IAAR,MAPY,yBASZN,GAAW,GATC,6EAAH,qDAYbI,GACD,GAAE,CAACH,KAGF,8BACGF,EACC,aACEV,GAAQA,EAAKkB,OAAS,GACxB,gBAAKC,UAAWC,EAAAA,SAAhB,UACE,eAAID,UAAWC,EAAAA,KAAf,SACGpB,EAAKqB,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcpB,EAAlC,EAAkCA,GAAlC,OACR,gBAAae,UAAWC,EAAAA,SAAxB,UAQGI,GACC,gBACEL,UAAWC,EAAAA,QACXK,IAAKH,EACLI,IAAG,wCAAmCF,MAGxC,gBAAKL,UAAWC,EAAAA,QAAaK,IAAKH,KAGpC,cAAGH,UAAWC,EAAAA,SAAd,SAA6BE,KAC7B,cAAGH,UAAWC,EAAAA,cAAd,SAAkCG,MAnB3BnB,EADD,SA0Bd,cAAGe,UAAWC,EAAAA,MAAd,SAAyB,mBAIhC,C","sources":["API_links/Api.js","components/Cast/cast.module.css","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '6761a75cfe3ce8a6cf2b591c7da9567e';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// API function for searching movies\n\nexport async function searchMovies(query) {\n  try {\n    const API_URL = `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`;\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    console.error('There is a error in search movies of', error);\n    throw error;\n  }\n}\n\n// API function for movie details\n\nexport async function getMovieDetails(id) {\n  try {\n    const API_URL = `movie/${id}?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    console.error('There is a error in search movies details of', error);\n    throw error;\n  }\n}\n\n// API function for movie trendings\n\nexport async function getTrending() {\n  try {\n    const API_URL = `trending/movie/day?api_key=${API_KEY}`;\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    console.error('There is a error in searching trendings of', error);\n    throw error;\n  }\n}\n\n// API function for movie reviews\n\nexport async function getReviews(id) {\n  try {\n    const API_URL = `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    console.error('There is a error in searching reviews of', error);\n    throw error;\n  }\n}\n\n// API function for movie credits\n\nexport async function getMovieCredits(id) {\n  try {\n    const API_URL = `movie/${id}/credits?api_key=${API_KEY}&language=en-US`;\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    console.error('There is a error in searching reviews of', error);\n    throw error;\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {};","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieCredits } from '../../API_links/Api';\nimport css from './cast.module.css';\nimport PropTypes from 'prop-types';\n\nconst Cast = () => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const { movieIdParam } = useParams();\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setLoading(true);\n        const { cast } = await getMovieCredits(movieIdParam);\n        setData(cast);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getData();\n  }, [movieIdParam]);\n\n  return (\n    <>\n      {loading ? (\n        'Loading...'\n      ) : data && data.length > 0 ? (\n        <div className={css.listWrap}>\n          <ul className={css.list}>\n            {data.map(({ name, character, profile_path, id }) => (\n              <li key={id} className={css.listItem}>\n                {/* {profile_path && (\n                  <img\n                    className={css.listImg}\n                    alt={name}\n                    src={`https://image.tmdb.org/t/p/w92${profile_path}`}\n                  />\n                )} */}\n                {profile_path ? (\n                  <img\n                    className={css.listImg}\n                    alt={name}\n                    src={`https://image.tmdb.org/t/p/w92${profile_path}`}\n                  />\n                ) : (\n                  <img className={css.listImg} alt={name} />\n                )}\n\n                <p className={css.listName}>{name}</p>\n                <p className={css.listCharacter}>{character}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <p className={css.error}>No data found</p>\n      )}\n    </>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.number,\n};\n\nexport default Cast;\n"],"names":["API_KEY","searchMovies","query","API_URL","axios","response","data","console","error","getMovieDetails","id","getTrending","getReviews","getMovieCredits","useState","setData","loading","setLoading","movieIdParam","useParams","useEffect","getData","cast","log","length","className","css","map","name","character","profile_path","alt","src"],"sourceRoot":""}